
R version 3.4.1 (2017-06-30) -- "Single Candle"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "solrad"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "solrad-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('solrad')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("AST")
> ### * AST
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: AST
> ### Title: Apparent Solar Time
> ### Aliases: AST
> ### Keywords: AST
> 
> ### ** Examples
> 
> 
> #Calculating apparent solar time for two consecutive days
> 
> DOY <- seq(0, 2, .05)
> 
> ast <- AST(DOY, Lon=0, SLon=0, DS=60)
> #Note: only the difference between Lon and SLon matters not each value
> 
> plot(DOY, ast)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("AST", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("Altitude")
> ### * Altitude
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: Altitude
> ### Title: Solar Altitude Angle
> ### Aliases: Altitude
> ### Keywords: Altitude
> 
> ### ** Examples
> 
> 
> #Calculating solar altitude angle for two consecutive days
> 
> DOY <- seq(0, 2, .05)
> 
> alpha <- Altitude(DOY, Lat = 45, Lon=0, SLon=0, DS=60)
> #Note: only the difference between Lon and SLon matters not each value
> 
> plot(DOY, alpha)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("Altitude", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("Azimuth")
> ### * Azimuth
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: Azimuth
> ### Title: Solar Azimuth Angle
> ### Aliases: Azimuth
> ### Keywords: Azimuth
> 
> ### ** Examples
> 
> 
> #Calculating solar azimuth angle for two consecutive days on 45 degree lat and 10 degree lon
> 
> DOY <- seq(0, 2, .05)
> 
> Az <- Azimuth(DOY, Lat = 45, Lon=10, SLon=10, DS=0)
> #Note: only the difference between Lon and SLon matters not each value
> 
> plot(DOY, Az)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("Azimuth", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("DayLength")
> ### * DayLength
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: DayLength
> ### Title: Day Length
> ### Aliases: DayLength
> ### Keywords: Day Length
> 
> ### ** Examples
> 
> 
> #Calculating day length for 365 day of the year for 45 degree latitude
> 
> DOY <- 1:365
> 
> Lat = 45
> 
> dl <- DayLength(DOY, Lat)
> 
> plot(DOY, dl)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("DayLength", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("DayOfYear")
> ### * DayOfYear
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: DayOfYear
> ### Title: Day of year
> ### Aliases: DayOfYear
> ### Keywords: DOY, Day of year
> 
> ### ** Examples
> 
> 
> #Calculating day of year for now
> 
> DayOfYear(Sys.time())
[1] 138.458
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("DayOfYear", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("Declination")
> ### * Declination
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: Declination
> ### Title: Declination Angle
> ### Aliases: Declination
> ### Keywords: Angle Declination Solar
> 
> ### ** Examples
> 
> 
> #Calculating solar declination angle for 365 day of the year
> 
> DOY <- 1:365
> 
> delta <- Declination(DOY)
> 
> plot(DOY, delta)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("Declination", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("DiffuseRadiation")
> ### * DiffuseRadiation
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: DiffuseRadiation
> ### Title: Solar Diffuse Radiation on a Surface
> ### Aliases: DiffuseRadiation
> ### Keywords: Diffuse Radiation
> 
> ### ** Examples
> 
> 
> #Calculating atmospheric transmittance coefficient for two consecutive days on 45 degree
> # latitude and 10 degree longitude and at 100 m altitude.
> 
> DOY <- seq(0, 2, .05)
> 
> Sdifopen <- DiffuseRadiation(DOY, Lat = 45, Lon=10, SLon=10, DS=0, Elevation = 100, Slope = 0)
> #Note: only the difference between Lon and SLon matters not each value
> 
> plot(DOY, Sdifopen)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("DiffuseRadiation", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("DiffusionFactor")
> ### * DiffusionFactor
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: DiffusionFactor
> ### Title: Atmospheric Diffusion Factor
> ### Aliases: DiffusionFactor
> ### Keywords: Atmospheric Diffusion
> 
> ### ** Examples
> 
> 
> #Calculating atmospheric diffusion factor for two consecutive days on 45 degree
> # latitude and 10 degree longitude and at 100 m altitude.
> 
> DOY <- seq(0, 2, .05)
> 
> td <- DiffusionFactor(DOY, Lat = 45, Lon=10, SLon=10, DS=0, Elevation = 100)
> #Note: only the difference between Lon and SLon matters not each value
> 
> plot(DOY, td)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("DiffusionFactor", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("DirectRadiation")
> ### * DirectRadiation
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: DirectRadiation
> ### Title: Solar Direct Beam Radiation on Surface
> ### Aliases: DirectRadiation
> ### Keywords: Beam Direct Radiation
> 
> ### ** Examples
> 
> 
> #Calculating atmospheric transmittance coefficient for two consecutive days on 45 degree
> #latitude and 10 degree longitude and at 100 m altitude.
> 
> DOY <- seq(0, 2, .05)
> 
> Sopen <- OpenRadiation(DOY, Lat = 45, Lon=10, SLon=10, DS=0, Elevation = 100)
> #Note: only the difference between Lon and SLon matters not each value
> 
> plot(DOY, Sopen)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("DirectRadiation", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("EOT")
> ### * EOT
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: EOT
> ### Title: Equation of time
> ### Aliases: EOT
> ### Keywords: Equation of time value
> 
> ### ** Examples
> 
> 
> #Calculating equaiton of time for 365 day of the year
> 
> DOY <- 1:365
> 
> eot <- EOT(DOY)
> 
> plot(DOY, eot)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("EOT", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("Extraterrestrial")
> ### * Extraterrestrial
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: Extraterrestrial
> ### Title: Solar Extraterrestrial Radiation
> ### Aliases: Extraterrestrial
> ### Keywords: Extraterrestrial Radiation Solar
> 
> ### ** Examples
> 
> 
> #Calculating solar extraterrestrial radiation for 365 day of the year
> 
> DOY <- 1:365
> 
> Sextr <- Extraterrestrial(DOY)
> 
> plot(DOY, Sextr)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("Extraterrestrial", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("ExtraterrestrialNormal")
> ### * ExtraterrestrialNormal
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ExtraterrestrialNormal
> ### Title: Normal Extraterrestrial Solar Radiation
> ### Aliases: ExtraterrestrialNormal
> ### Keywords: Extraterrestrial Normal Radiation Solar
> 
> ### ** Examples
> 
> 
> #Calculating solar incidence angle for two consecutive days on 45 degree latitude and
> # 10 degree longitude
> 
> DOY <- seq(0, 2, .05)
> 
> SextrNormal <- ExtraterrestrialNormal(DOY, Lat = 45, Lon=10, SLon=10, DS=0, Slope = 10, Aspect = 0)
> #Note: only the difference between Lon and SLon matters not each value
> 
> plot(DOY, SextrNormal)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("ExtraterrestrialNormal", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("HourAngle")
> ### * HourAngle
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: HourAngle
> ### Title: Solar Hour Angle
> ### Aliases: HourAngle
> ### Keywords: Angle Hour
> 
> ### ** Examples
> 
> 
> #Calculating solar hour angle for two consecutive days
> 
> DOY <- seq(0, 2, .05)
> 
> h <- HourAngle(DOY, Lon=0, SLon=0, DS=60)
> #Note: only the difference between Lon and SLon matters not each value
> 
> plot(DOY, h)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("HourAngle", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("Incidence")
> ### * Incidence
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: Incidence
> ### Title: Solar Incidence Angle
> ### Aliases: Incidence
> ### Keywords: Angle Incidence Solar
> 
> ### ** Examples
> 
> 
> #Calculating solar incidence angle for two consecutive days on 45 degree latitude and
> # 10 degree longitude
> 
> DOY <- seq(0, 2, .05)
> 
> theta <- Incidence(DOY, Lat = 45, Lon=10, SLon=10, DS=0, Slope = 10, Aspect = 0)
> #Note: only the difference between Lon and SLon matters not each value
> 
> plot(DOY, theta)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("Incidence", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("LST")
> ### * LST
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: LST
> ### Title: Local Standard Time
> ### Aliases: LST
> ### Keywords: LST
> 
> ### ** Examples
> 
> 
> #Calculating  local standard time for two consecutive days
> 
> DOY <- seq(0, 2, .05)
> 
> lst <- LST(DOY)
> 
> plot(DOY, lst)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("LST", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("OpenRadiation")
> ### * OpenRadiation
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: OpenRadiation
> ### Title: Open Sky Solar Radiation
> ### Aliases: OpenRadiation
> ### Keywords: Open Radiation
> 
> ### ** Examples
> 
> 
> #Calculating open sky solar radiation for two consecutive days on 45 degree latitude and
> # 10 degree longitude and at 100 m altitude.
> 
> DOY <- seq(0, 2, .05)
> 
> Sopen <- OpenRadiation(DOY, Lat = 45, Lon=10, SLon=10, DS=0, Elevation = 100)
> #Note: only the difference between Lon and SLon matters not each value
> 
> plot(DOY, Sopen)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("OpenRadiation", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("Solar")
> ### * Solar
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: Solar
> ### Title: Calculating Solar Variables
> ### Aliases: Solar
> ### Keywords: Solar Variables
> 
> ### ** Examples
> 
> 
> #Calculating solar variables and angles
> 
> DOY <- seq(0, 2, .05)
> 
> solar <- Solar(DOY, Lat = 45, Lon=10, SLon=10, DS=0, Elevation = 1000, Slope = 10, Aspect = 0)
> #Note: only the difference between Lon and SLon matters not each value
> 
> par(mfrow=c(3,1))
> plot(DOY, solar$Altitude, ylim = c(-90,90))
> plot(DOY, solar$Azimuth, col= 'red')
> 
> plot(DOY, solar$Sdiropen)
> lines(DOY, solar$Sdifopen, col='red')
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("Solar", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("SolarConstant")
> ### * SolarConstant
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: SolarConstant
> ### Title: Solar Constant
> ### Aliases: SolarConstant
> ### Keywords: Constant Solar
> 
> ### ** Examples
> 
> 
> #Printing Solar Constant
> 
> print(SolarConstant)
[1] 1366.1
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("SolarConstant", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("Sunrise")
> ### * Sunrise
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: Sunrise
> ### Title: Sunrise Time
> ### Aliases: Sunrise
> ### Keywords: Sunrise
> 
> ### ** Examples
> 
> 
> #Calculating sunrise time for 365 day of the year for 45 degree latitude
> 
> DOY <- 1:365
> 
> Lat = 45
> 
> sunrise <- Sunset(DOY, Lat)
> 
> plot(DOY, sunrise)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("Sunrise", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("Sunset")
> ### * Sunset
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: Sunset
> ### Title: Sunset Time
> ### Aliases: Sunset
> ### Keywords: Sunset
> 
> ### ** Examples
> 
> 
> #Calculating sunset time for 365 day of the year for 45 degree latitude
> 
> DOY <- 1:365
> 
> Lat = 45
> 
> sunset <- Sunset(DOY, Lat)
> 
> plot(DOY, sunset)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("Sunset", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("Transmittance")
> ### * Transmittance
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: Transmittance
> ### Title: Atmospheric Transmittance
> ### Aliases: Transmittance
> ### Keywords: Atmospheric Transmittance
> 
> ### ** Examples
> 
> 
> #Calculating atmospheric transmittance coefficient for two consecutive days on 45 degree
> # latitude and 10 degree longitude and at 100 m altitude.
> 
> DOY <- seq(0, 2, .05)
> 
> tb <- Transmittance(DOY, Lat = 45, Lon=10, SLon=10, DS=0, Elevation = 100)
> 
> #Note: only the difference between Lon and SLon matters not each value
> 
> plot(DOY, tb)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("Transmittance", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.171 0.005 0.175 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
